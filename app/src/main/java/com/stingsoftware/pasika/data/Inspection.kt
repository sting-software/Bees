package com.stingsoftware.pasika.data

import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.PrimaryKey

/**
 * Data class representing a single Hive Inspection record.
 * Annotated with @Entity for Room Persistence Library to define a table in the database.
 *
 * @param id Unique identifier for the inspection record. Auto-generated by Room if set to 0.
 * @param hiveId The ID of the parent hive to which this inspection belongs.
 * Uses a ForeignKey to ensure referential integrity, deleting inspections if the hive is deleted.
 * @param inspectionDate The timestamp of the inspection, in milliseconds.
 * @param queenPresent Boolean indicating if the queen bee was observed. (REMOVED)
 * @param queenCellsPresent Boolean indicating if queen cells were observed.
 * @param eggsPresent Boolean indicating if eggs were observed. (REMOVED)
 * @param openBroodPresent Boolean indicating if open brood was observed. (REMOVED)
 * @param cappedBroodPresent Boolean indicating if capped brood was observed. (REMOVED)
 * @param honeyStoresEstimateFrames Optional: Estimated honey stores in number of frames. (CHANGED FROM KG)
 * @param pollenStoresEstimateFrames Optional: Estimated pollen stores in number of frames.
 * @param pestsDiseasesObserved Optional: Text describing any pests or diseases observed.
 * @param treatmentApplied Optional: Text describing any treatment applied during this inspection.
 * @param notes Optional: General notes or observations from the inspection.
 * @param framesEggsCount Optional: Number of frames with eggs (can be different from simple presence).
 * @param framesOpenBroodCount Optional: Number of frames with open brood.
 * @param framesCappedBroodCount Optional: Number of frames with capped brood.
 * @param framesHoneyCount Optional: Number of frames with honey.
 * @param framesPollenCount Optional: Number of frames with pollen.
 * @param temperamentRating Optional: Rating of the hive's temperament (e.g., 1-4).
 * @param managementActionsTaken Optional: Text describing management actions taken (e.g., "added super", "fed sugar syrup").
 */
@Entity(
    tableName = "inspections",
    foreignKeys = [ForeignKey(
        entity = Hive::class,
        parentColumns = ["id"],
        childColumns = ["hiveId"],
        onDelete = ForeignKey.CASCADE // When a Hive is deleted, all its Inspections are also deleted
    )]
)
data class Inspection(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0L,
    val hiveId: Long,

    val inspectionDate: Long = System.currentTimeMillis(),

    // Queen & Brood Status - Removed simple booleans, kept queenCellsPresent
    val queenCellsPresent: Boolean? = null,
    val queenCellsCount: Int? = null, // NEW: For number of queen cells

    // Detailed Frame Counts (from original request, now used more directly)
    val framesEggsCount: Int? = null,
    val framesOpenBroodCount: Int? = null,
    val framesCappedBroodCount: Int? = null,
    val framesHoneyCount: Int? = null,
    val framesPollenCount: Int? = null,

    // Stores - Changed to Frames
    val honeyStoresEstimateFrames: Int? = null, // Changed from Double? to Int? and name to Frames
    val pollenStoresEstimateFrames: Int? = null,

    // Health & Treatment
    val pestsDiseasesObserved: String? = null,
    val treatmentApplied: String? = null,

    // Temperament/Behavior
    val temperamentRating: Int? = null,

    // Management Actions & Notes
    val managementActionsTaken: String? = null,
    val notes: String? = null
)
